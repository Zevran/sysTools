#! /usr/bin/env python
import sys, os, subprocess, getopt
from os import listdir

argv = sys.argv
user_name = os.getenv("USER")
home_dir = os.getenv("HOME")
git_dir = home_dir + '/' + ".git"
dep_dir = "/var/sysTools/git"

####
## Print usage
####

def usage(msg=""):
	print("Usage: git_tool [-v] [-s] [-n] [-d] [-i] <gitnames>")
	print("Help: Git_tool help you to manage your repositories.\nOptions:\n\
	-v	--version	Display version of git_tool\n\
	-l	--list		Display a list of all repositories\n\
	-s	--shared	Enable share mode of specified repository\n\
	-n	--new		Create a new repository\n\
	-d	--delete	Delete a existing repository\n\
	-i	--infos		Display basics information of specified repository")
	if msg:
		print("%s" % msg)
	sys.exit(0)

####
## Initialize git repository
####

def create_repo(repo_name):
	print "Creating git repository : %s.git" % repo_name
	link_file = home_dir + '/' + repo_name + ".git"
	repo_dir = git_dir + '/' + repo_name + ".git"
	if os.path.exists(repo_dir) or os.path.exists(link_file):
		print("Error: %s: File exists") % repo_name
	else:
		subprocess.call(["ln", "-s", repo_dir, link_file])
		subprocess.call(["git", "init", "--bare", repo_dir])

####
## Delete git repository
####

def delete_repo(repo_name):
	print "Deleting git repository : %s.git" % repo_name
	link_file = home_dir + '/' + repo_name + ".git"
	repo_dir = git_dir + '/' + repo_name + ".git"
	if repo_name is None:
		print("Error: You must specify a valid repository name")
	elif os.path.exists(repo_dir) or os.path.exists(link_file):
		subprocess.call(["rm", "-rf", repo_dir])
		subprocess.call(["rm", "-rf", link_file])
	else:
		print("Error: %s: No such file or directory") % repo_name

####
## Enable share mode
####

def share_repo(repo_name, mode):
	print "Shared enable on git repository : %s" % repo_name
	repo_dir = git_dir + '/' + repo_name
	shared_dir = dep_dir + '/' + user_name
	shared_link = shared_dir + '/' + repo_name + ".git"
	if repo_name is None:
		print("Error: You must specify a valid repository name")
	elif os.path.exists(shared_dir) is False:
		subprocess.call(["mkdir", shared_dir])
	elif os.path.exists(repo_dir):
		subprocess.call(["ln", "-s", repo_dir, shared_link])
	else:
		print("Error: %s: No such file or directory") % repo_name
	if mode == "rdwr":
		print "Git repository permissions update to read && write"
		subprocess.call(["chmod", "-R", "770", shared_link])
	elif mode == "rdonly" or mode is None:
		print "Git repository permissions update to read only"
		subprocess.call(["chmod", "-R", "740", shared_link])


####
## Get list of active repositories
####

def get_list():
	count = 0
	for files in listdir(git_dir + '/'):
		print("%s\n") % files,
		count += 1
	if count > 0:
		print("Total of git repositories : %d" % count)
	else:
		print("Nothing found")

####
## Print version
####

def get_version():
	print ("Beta :)")

if len(argv) < 2:
	usage()

try:
	optspec = ["help", "version", "shared", "new", "delete", "list"]
	global_args, cmd = getopt.getopt(argv[1:], "hvs:n:d:l", optspec)
except getopt.GetoptError, ex:
	usage("error: %s" % ex.msg)

for opt in global_args:
	if opt[0] in ['-h', '--help']:
		usage()
	elif opt[0] in ['-v', '--version']:
		get_version()
	elif opt[0] in ['-s', '--shared']:
		share_repo(opt[1])
	elif opt[0] in ['-n', '--new']:
		create_repo(opt[1])
	elif opt[0] in ['-d', '--delete']:
		delete_repo(opt[1])
	elif opt[0] in ['-l', '--list']:
		get_list()
	else:
		usage('error: unexpected option "%s"' % opt[0])


